package de.unikassel.vs.alica.codegen.cpp.templates;

import de.unikassel.vs.alica.planDesigner.alicamodel.Plan;
import de.unikassel.vs.alica.planDesigner.alicamodel.Transition;
import de.unikassel.vs.alica.planDesigner.alicamodel.State;
import de.unikassel.vs.alica.codegen.templates.ITransitionTemplates;


class TransitionTemplatesHeader implements ITransitionTemplates {

    override String constraintPlanTransitionPreCondition(Plan plan, Transition transition) '''
#pragma once

namespace alicaAutogenerated {
    class Constraint«transition.preCondition.id»: public BasicConstraint {
        public:
            static long id;
            Constraint«transition.preCondition.id»();

        private:
            std::shared_ptr<Constraint«transition.preCondition.id»Impl> impl;
            void getConstraint(shared_ptr<std::ProblemDescriptor> c, std::shared_ptr<RunningPlan> rp);
    };
}
'''

    override String constraintPlanTransitionPreConditionImpl(Transition transition) '''
#pragma once

namespace alicaAutogenerated {
    class Constraint«transition.preCondition.id»Impl {
        public:
            static long id;
            Constraint«transition.preCondition.id»Impl();

        private:
            void getConstraint(shared_ptr<std::ProblemDescriptor> c, std::shared_ptr<RunningPlan> rp);
    };
}
'''

    override String transitionPreConditionPlan(State state, Transition transition) '''
#pragma once

namespace alicaAutogenerated {
    class PreCondition«transition.preCondition.id»: public DomainCondition {
        public:
            static long id;
            PreCondition«transition.preCondition.id»(void* context);

        private:
            std::shared_ptr<PreCondition«transition.preCondition.id»Impl> impl;
            bool evaluate(std::shared_ptr<RunningPlan> rp);
    };
}
'''

    override String transitionPreConditionPlanImpl(Transition transition) '''
#pragma once

#include "DomainCondition.h"

namespace alicaAutogenerated {
    class PreCondition«transition.preCondition.id»Impl {
        public:
            static long id;
            PreCondition«transition.preCondition.id»Impl(shared_ptr<std::DomainCondition> condition);

        private:
            std::shared_ptr<DomainCondition> condition;
            boolean evaluate(std::shared_ptr<RunningPlan> rp);
    };
}
'''

}
